{"version":3,"sources":["services/editFileService.js","App.js","serviceWorker.js","index.js"],"names":["editFileService","getContentFile","axios","get","then","resp","catch","error","saveContentFile","state","console","log","post","App","props","componentDidMount","response","status","data","setState","file","handleChange","e","target","value","name","content","handleSubmit","className","onSubmitCapture","this","TextArea","rows","type","onChange","htmlType","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qWAEaA,EAAkB,CAC3BC,eAIH,WACG,OAAOC,IAAMC,IAAN,uBACNC,MAAK,SAAAC,GACF,OAAOA,KACRC,OAAM,SAAAC,GACJ,OAAOA,MARZC,gBAYJ,SAAyBC,GAErB,OADAC,QAAQC,IAAIF,GACLP,IAAMU,KAAN,gBAA2BH,GACjCL,MAAK,SAAAC,GACF,OAAOA,KACRC,OAAM,SAAAC,GACJ,OAAOA,O,IChBKM,E,kDAGnB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAMTC,kBAAoB,WACjBf,EAAgBC,iBAAiBG,MAAK,SAAAY,GACb,MAApBA,EAASC,QACVP,QAAQC,IAAI,WAAWK,EAASE,MAChC,EAAKC,SAAS,CAAEC,KAAOJ,EAASE,QAGhCR,QAAQC,IAAI,2BAAwBK,OAdxB,EAiBnBK,aAAe,SAAAC,GAAK,IAAD,EACMA,EAAEC,OAAZC,GADI,EACVC,KADU,EACJD,OACVJ,EAAO,EAAKX,MAAMW,KACtBA,EAAO,CACLK,KAAKL,EAAKK,KACVC,QAAQF,GAEV,EAAKL,SAAS,CAAEC,UAxBE,EA0BnBO,aAAe,WACd3B,EAAgBQ,gBAAgB,EAAKC,MAAMW,MAAMhB,MAAK,SAAAY,GAC7B,MAApBA,EAASC,QACV,EAAKE,SAAS,CAAEC,KAAMJ,EAASE,OAC/BR,QAAQC,IAAI,yBAAyBK,EAASE,OAK9CR,QAAQC,IAAI,2BAAwBK,OAjCtC,EAAKP,MAAM,CACVW,KAAK,IAHU,E,qDAuChB,OACE,yBAAKQ,UAAU,OAET,kBAAC,IAAD,CAAMC,gBAAiBC,KAAKH,cACxB,kBAAC,IAAD,CAAQC,UAAU,WAAWJ,MAAOM,KAAKrB,MAAMW,KAAKK,OACpD,kBAAC,IAAMM,SAAP,CAAgBC,KAAM,GAAIJ,UAAU,UAAUK,KAAK,OAAOT,MAAOM,KAAKrB,MAAMW,KAAKM,QAASD,KAAK,UAAUS,SAAUJ,KAAKT,eACxH,kBAAC,IAAD,CAAQY,KAAK,UAAUE,SAAS,SAASP,UAAU,WAAnD,c,GAhDiBQ,aCMbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,6BACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEd5C,OAAM,SAAAC,GACLG,QAAQH,MAAMA,EAAM4C,c","file":"static/js/main.ba86b9d9.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const editFileService = {\r\n    getContentFile,\r\n    saveContentFile\r\n}\r\n\r\n function getContentFile() {\r\n    return axios.get(`/api/getcontentfile`)\r\n    .then(resp => {\r\n        return resp;\r\n    }).catch(error=>{\r\n         return error;\r\n    });\r\n\r\n}\r\nfunction saveContentFile(state) {\r\n    console.log(state)\r\n    return axios.post(`/api/savefile`,state)\r\n    .then(resp => {\r\n        return resp;\r\n    }).catch(error=>{\r\n         return error;\r\n    });\r\n\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport { Button, Form, Input } from 'antd';\nimport { editFileService } from './services/editFileService';\n\n\nexport default class App extends Component {\n\n\n  constructor(props){\n    super(props);\n    this.state={\n     file:{},\n    }\n  }\n\n componentDidMount = ()=>{\n    editFileService.getContentFile().then(response=>{\n      if(response.status === 200){\n        console.log(\"response\",response.data)\n        this.setState({ file : response.data});\n      }\n      else\n        console.log(\"erreur coté serveur: \",response)\n    });\n }\n handleChange = e =>{\n  const { name, value } = e.target;\n  let file = this.state.file;\n  file = {\n    name:file.name,\n    content:value\n  };\n  this.setState({ file });\n }\n handleSubmit = ()=>{\n  editFileService.saveContentFile(this.state.file).then(response=>{\n    if(response.status === 200){\n      this.setState({ file: response.data })\n      console.log(\"response file modified\",response.data)\n\n      // this.setState({ file : response.data});\n    }\n    else\n      console.log(\"erreur coté serveur: \",response)\n  });\n }\n  render() {\n    return (\n      <div className=\"App\">\n            {/* <EditFile file={this.state.file}/>  */}\n            <Form onSubmitCapture={this.handleSubmit}>\n                <Input  className=\"namefile\" value={this.state.file.name} />\n                <Input.TextArea rows={25} className=\"content\" type=\"text\" value={this.state.file.content} name=\"content\" onChange={this.handleChange}/>\n                <Button type=\"primary\" htmlType=\"submit\" className=\"savebtn\" >\n                    Save\n                </Button>\n            </Form>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}